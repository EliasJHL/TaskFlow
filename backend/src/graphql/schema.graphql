# Enum definitions
enum Role {
  Admin
  Member
  Viewer
}

# Scalars
scalar DateTime

# Types definitions
type User {
  user_id: ID!
  username: String!
  email: String!
  picture: String
  created_at: DateTime!
}

type Workspace {
  workspace_id: ID!
  name: String!
  color: String!
  description: String
  owner_id: ID!
  owner: User
  members: [WorkspaceMembers!]!
  boards: [Board]
  is_pinned: Boolean!
}

type WorkspaceMembers {
  workspace_id: ID!
  user: User!
  role: Role!
}

type Board {
  board_id: ID!
  title: String!
  description: String
  color: String!
  lists: [List!]!
  labels: [Label!]!
  workspace_id: ID!
}

type List {
  list_id: ID!
  title: String!
  position: Int!
  color: String!
  board_id: ID!
  cards: [Card]
}

type Card {
  card_id: ID!
  title: String!
  description: String
  position: Int!
  list_id: ID!
  labels: [Label]
  due_date: DateTime
  comments: [Comment]
  attachments: [Attachment]
  members: [CardMember]
}

type Comment {
  comment_id: ID!
  content: String!
  created_at: DateTime!
  card_id: ID!
  user_id: ID!
}

type Label {
  label_id: ID!
  name: String!
  color: String!
  board_id: ID!
}

type Attachment {
  attachment_id: ID!
  card_id: ID!
  url: String!
  filename: String!
}

type CardLabel {
  card_id: ID!
  label_id: ID!
}

type CardMember {
  card_id: ID!
  user_id: ID!
}

# Root query type
type Query {
  users: [User]
  user(user_id: ID!): User
  me: User

  workspaces: [Workspace]
  workspace(workspace_id: ID!): Workspace

  boards(workspace_id: ID!): [Board]

  board(board_id: ID!): Board
  lists(board_id: ID!): [List]
  list(list_id: ID!): List
  cards(list_id: ID!): [Card]
  card(card_id: ID!): Card
  labels(board_id: ID!): [Label]
  comments(card_id: ID!): [Comment]
}

# Input types for mutations
input CreateUserInput {
  username: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  user_id: ID!
  username: String
  email: String
  password: String
}

input LoginInput {
  email: String!
  password: String!
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
}

type AuthPayload {
  token: String!
  user: User!
}

input CreateWorkspaceInput {
  name: String!
  description: String
  color: String
}

type CreateWorkspacePayload {
  workspace: Workspace
}

input UpdateWorkspaceInput {
  name: String
  description: String
  color: String
}

input CreateBoardInput {
  title: String!
  description: String
  color: String!
  workspace_id: ID!
}

type CreateBoardPayload {
  board: Board
}

input UpdateBoardInput {
  board_id: ID!
  title: String
  description: String
  color: String
}

type UpdateBoardPayload {
  board: Board
}

input CreateListInput {
  title: String!
  board_id: ID!
  position: Int!
  color: String
}

input UpdateListInput {
  list_id: ID!
  title: String
  position: Int
  color: String
}

input CreateCardInput {
  title: String!
  list_id: ID!
  description: String
  position: Int!
  due_date: DateTime
}

input UpdateCardInput {
  card_id: ID!
  title: String
  description: String
  position: Int
  due_date: DateTime
}

input CreateLabelInput {
  name: String!
  color: String!
  board_id: ID!
}

input UpdateLabelInput {
  label_id: ID!
  name: String
  color: String
}

type Status {
  success: Boolean!
  message: String
}

input CreateCommentInput {
  content: String!
  card_id: ID!
}

input UpdateCommentInput {
  comment_id: ID!
  content: String!
}

# Root mutation type
type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(user_id: ID!): User

  login(input: LoginInput!): AuthPayload
  register(input: RegisterInput!): AuthPayload
  logout: Status!

  createWorkspace(input: CreateWorkspaceInput!): CreateWorkspacePayload!
  updateWorkspace(workspace_id: ID!, input: UpdateWorkspaceInput!): Workspace!
  deleteWorkspace(workspace_id: ID!): Status!

  createBoard(input: CreateBoardInput!): CreateBoardPayload!
  updateBoard(input: UpdateBoardInput!): Board!
  deleteBoard(board_id: ID!): Status!

  # Lists
  createList(input: CreateListInput!): List!
  updateList(input: UpdateListInput!): List!
  deleteList(list_id: ID!): Status!
  reorderLists(board_id: ID!, list_ids: [ID!]!): [List!]!

  # # Cards
  createCard(input: CreateCardInput!): Card!
  updateCard(input: UpdateCardInput!): Card!
  deleteCard(card_id: ID!): Status!
  moveCard(card_id: ID!, list_id: ID!, position: Int!): Card!
  
  # # Labels
  # createLabel(input: CreateLabelInput!): Label!
  # updateLabel(input: UpdateLabelInput!): Label!
  # deleteLabel(label_id: ID!): Status!
  # addLabelToCard(card_id: ID!, label_id: ID!): Card!
  # removeLabelFromCard(card_id: ID!, label_id: ID!): Card!

  # # Comments
  # createComment(input: CreateCommentInput!): Comment!
  # updateComment(input: UpdateCommentInput!): Comment!
  # deleteComment(comment_id: ID!): Status!
}
